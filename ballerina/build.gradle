/*
 * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com)
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - Confluent Schema Registry Connector'

def packageName = "confluent.cregistry"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    testCoverageParam = "--code-coverage --coverage-format=xml"
    isConnector = true
    langVersion = ballerinaLangVersion
}

configurations {
    externalJars
    jbalTools
    ballerinaStdLibs
}

dependencies {
    jbalTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    externalJars(group: 'io.confluent', name: 'kafka-schema-registry-client', version: "${kafkaSchemaRegistryVersion}") {
        transitive = false
    }
    externalJars(group: 'io.confluent', name: 'common-config', version: "${commonConfigVersion}") {
        transitive = false
    }
    externalJars(group: 'io.confluent', name: 'common-utils', version: "${commonUtilsVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jacksonVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${jacksonVersion}") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.kafka', name: 'kafka-clients', version: "${kafkaClientVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.avro', name: 'avro', version: "${avroVersion}") {
        transitive = false
    }
    externalJars(group: 'com.google.guava', name: 'guava', version: '32.0.1-jre') {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
        newBallerinaToml = newBallerinaToml.replace("@avro.version@", avroVersion)
        newBallerinaToml = newBallerinaToml.replace("@jackson.version@", jacksonVersion)
        newBallerinaToml = newBallerinaToml.replace("@kafka.schema.registry.version@", kafkaSchemaRegistryVersion)
        newBallerinaToml = newBallerinaToml.replace("@commons.version@", commonConfigVersion)
        newBallerinaToml = newBallerinaToml.replace("@common.config.version@", commonConfigVersion)
        newBallerinaToml = newBallerinaToml.replace("@common.utils.version@", commonUtilsVersion)
        newBallerinaToml = newBallerinaToml.replace("@kafka.clients.version@", kafkaClientVersion)
        ballerinaTomlFile.text = newBallerinaToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the toml files\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the toml files' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

clean {
    delete 'build'
}

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn copyToLib
build.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-native:build"

publish.dependsOn build
publishToMavenLocal.dependsOn build
